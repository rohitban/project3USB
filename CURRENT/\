`define TOKEN 2'b01


module rc_nrzi_test;
	/* rc_nrzi */
	logic clk, rst_n;
	logic s_in, start_rc_nrzi, end_rc_nrzi;
	logic start_unstuffer, end_unstuffer, s_out;
	/* bitUnstuffer */
	logic s_out_unstuff;
	logic start_decode, end_decode;
	/* bit stream decoder */
	logic start_rc_crc, end_rc_crc, PID_error, rc_PID_error, s_out_decoder;
	/*rc_crc*/
	logic start_rc_crc, end_rc_crc, rc_CRC_error, pkt_rec, pkt_status, CRC_error;
	logic [7:0] rc_hshake;
	logic [63:0] rc_data;
	

	rc_nrzi     nrzi(.*);

	bitUnstuffer   unstuff(.s_in(s_out), .start_unstuffer, .end_unstuffer, .s_out(s_out_unstuff),
									.start_decode, .end_decode);
	
	bs_decoder      bsdecode(.clk, .rst_n, .start_decode, .end_decode, .s_in(s_out_unstuff), 
									 .start_rc_crc, .end_rc_crc, .PID_error, .rc_PID_error, s_out(s_out_decoder));
	
	rc_crc              crc(.clk, .rst_n, .s_in(s_out_decoder), .start_rc_crc, .end_rc_crc, .rc_CRC_error, 
									.pkt_rec, .pkt_status, .CRC_error, .rc_hshake, .rc_data);


endmodule : rc_nrzi_test

